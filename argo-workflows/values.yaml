images:
  tag: ""
  pullPolicy: Always
  pullSecrets: []

crds:
  install: true
  keep: true
  annotations: {}

createAggregateRoles: true
nameOverride:
fullnameOverride:
kubeVersionOverride: ""
apiVersionOverrides:
  autoscaling: "" # autoscaling/v2
  cloudgoogle: "" # cloud.google.com/v1

singleNamespace: false

workflow:
  namespace:
  serviceAccount:
    create: true
    labels: {}
    annotations: {}
    name: "argo-workflow"
  rbac:
    create: true

controller:
  image:
    registry: quay.io
    repository: argoproj/workflow-controller
    tag: ""
  parallelism:
  resourceRateLimit: {}

  rbac:
    create: true
    secretWhitelist: []
    accessAllSecrets: true
    writeConfigMaps: false
  namespaceParallelism:
  initialDelay:
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  metricsConfig:
    enabled: false
    path: /metrics
    port: 9090
    metricsTTL: ""
    ignoreErrors: false
    secure: false
    portName: metrics
    servicePort: 8080
    servicePortName: metrics
    relabelings: []
    metricRelabelings: []
    targetLabels: []
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  persistence: {}
  # connectionPool:
  #   maxIdleConns: 100
  #   maxOpenConns: 0
  # # save the entire workflow into etcd and DB
  # nodeStatusOffLoad: false
  # # enable archiving of old workflows
  # archive: false
  # postgresql:
  #   host: localhost
  #   port: 5432
  #   database: postgres
  #   tableName: argo_workflows
  #   # the database secrets must be in the same namespace of the controller
  #   userNameSecret:
  #     name: argo-postgres-config
  #     key: username
  #   passwordSecret:
  #     name: argo-postgres-config
  #     key: password

  workflowDefaults: {}
  workflowWorkers: # 32
  workflowRestrictions: {}
  telemetryConfig:
    # -- Enables prometheus telemetry server
    enabled: false
    path: /telemetry
    port: 8081
    metricsTTL: ""
    ignoreErrors: false
    secure: false
    servicePort: 8081
    servicePortName: telemetry
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    namespace: "" # "monitoring"
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations:
      workflows.argoproj.io/rbac-rule: "'admin' in groups"
      workflows.argoproj.io/rbac-rule-precedence: "1"

  # -- Workflow controller name string
  name: workflow-controller

  workflowNamespaces:
    - workflows

  instanceID:
    enabled: false
    useReleaseName: false
    explicitID: ""

  logging:
    # -- Set the logging level (one of: `debug`, `info`, `warn`, `error`)
    level: info
    # -- Set the glog logging level
    globallevel: "0"
    # -- Set the logging format (one of: `text`, `json`)
    format: "text"

  # -- Service type of the controller Service
  serviceType: ClusterIP
  # -- Annotations to be applied to the controller Service
  serviceAnnotations: {}
  # -- Optional labels to add to the controller Service
  serviceLabels: {}
  # -- Source ranges to allow access to service from. Only applies to service type `LoadBalancer`
  loadBalancerSourceRanges: []

  # -- Resource limits and requests for the controller
  resources: {}

  # -- Configure liveness [probe] for the controller
  # @default -- See [values.yaml]
  livenessProbe:
    httpGet:
      port: 6060
      path: /healthz
    failureThreshold: 3
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 30

  # -- Extra environment variables to provide to the controller container
  extraEnv: []
    # - name: FOO
    #   value: "bar"

  # -- Extra arguments to be added to the controller
  extraArgs: []
  # -- Additional volume mounts to the controller main container
  volumeMounts: []
  # -- Additional volumes to the controller pod
  volumes: []
  # -- The number of controller pods to run
  replicas: 1

  pdb:
    # -- Configure [Pod Disruption Budget] for the controller pods
    enabled: false
    # minAvailable: 1
    # maxUnavailable: 1

  # -- [Node selector]
  nodeSelector:
    kubernetes.io/os: linux
  # -- [Tolerations] for use with node taints
  tolerations: []
  # -- Assign custom [affinity] rules
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to the workflow controller
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # -- Leverage a PriorityClass to ensure your pods survive resource shortages.
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName: ""

  # -- Configure Argo Server to show custom [links]
  ## Ref: https://argoproj.github.io/argo-workflows/links/
  links: []
  # -- Configure Argo Server to show custom [columns]
  ## Ref: https://github.com/argoproj/argo-workflows/pull/10693
  columns: []
  # -- Set ui navigation bar background color
  navColor: ""
  clusterWorkflowTemplates:
    # -- Create a ClusterRole and CRB for the controller to access ClusterWorkflowTemplates.
    enabled: true
  # -- Extra containers to be added to the controller deployment
  extraContainers: []

  # -- Enables init containers to be added to the controller deployment
  extraInitContainers: []

  # -- Workflow retention by number of workflows
  retentionPolicy: {}
  #  completed: 10
  #  failed: 3
  #  errored: 3

  nodeEvents:
    enabled: true
  kubeConfig: {}

  # -- Specifies the duration in seconds before a terminating pod is forcefully killed. A zero value indicates that the pod will be forcefully terminated immediately.
  # @default -- `30` seconds (Kubernetes default)
  podGCGracePeriodSeconds:

  # -- The duration in seconds before the pods in the GC queue get deleted. A zero value indicates that the pods will be deleted immediately.
  # @default -- `5s` (Argo Workflows default)
  podGCDeleteDelayDuration: ""

# mainContainer adds default config for main container that could be overriden in workflows template
mainContainer:
  # -- imagePullPolicy to apply to Workflow main container. Defaults to `.Values.images.pullPolicy`.
  imagePullPolicy: ""
  # -- Resource limits and requests for the Workflow main container
  resources: {}
  # -- Adds environment variables for the Workflow main container
  env: []
  # -- Adds reference environment variables for the Workflow main container
  envFrom: []
  # -- sets security context for the Workflow main container
  securityContext: {}

# executor controls how the init and wait container should be customized
executor:
  image:
    # -- Registry to use for the Workflow Executors
    registry: quay.io
    # -- Repository to use for the Workflow Executors
    repository: argoproj/argoexec
    # -- Image tag for the workflow executor. Defaults to `.Values.images.tag`.
    tag: ""
    # -- Image PullPolicy to use for the Workflow Executors. Defaults to `.Values.images.pullPolicy`.
    pullPolicy: ""
  # -- Resource limits and requests for the Workflow Executors
  resources: {}
  # -- Adds environment variables for the executor.
  env: []
  # -- sets security context for the executor container
  securityContext: {}

server:
  enabled: true
  baseHref: /
  image:
    # -- Registry to use for the server
    registry: quay.io
    # -- Repository to use for the server
    repository: argoproj/argocli
    # -- Image tag for the Argo Workflows server. Defaults to `.Values.images.tag`.
    tag: ""
  # -- optional map of annotations to be applied to the ui Deployment
  deploymentAnnotations: {}
  # -- optional map of annotations to be applied to the ui Pods
  podAnnotations: {}
  # -- Optional labels to add to the UI pods
  podLabels: {}
  # -- SecurityContext to set on the server pods
  podSecurityContext: {}
  rbac:
    # -- Adds Role and RoleBinding for the server.
    create: true
  # -- Servers container-level security context
  securityContext:
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  # -- Server name string
  name: server
  # -- Service type for server pods
  serviceType: ClusterIP
  # -- Service port for server
  servicePort: 2746
  # -- Service node port
  serviceNodePort: # 32746
  # -- Service port name
  servicePortName: "" # http

  serviceAccount:
    # -- Create a service account for the server
    create: true
    # -- Service account name
    name: "server-sa"
    # -- Labels applied to created service account
    labels: {}
    # -- Annotations applied to created service account
    annotations:
      workflows.argoproj.io/rbac-rule: "true"
      workflows.argoproj.io/rbac-rule-precedence: "0"

  # -- Annotations to be applied to the UI Service
  serviceAnnotations: {}
  # -- Optional labels to add to the UI Service
  serviceLabels: {}
  # -- Static IP address to assign to loadBalancer service type `LoadBalancer`
  loadBalancerIP: ""
  # -- Source ranges to allow access to service from. Only applies to service type `LoadBalancer`
  loadBalancerSourceRanges: []
  # -- Resource limits and requests for the server
  resources: {}
  # -- The number of server pods to run
  replicas: 1
  ## Argo Server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo Server
    enabled: false
    # -- Minimum number of replicas for the Argo Server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the Argo Server [HPA]
    maxReplicas: 5
    # -- Average CPU utilization percentage for the Argo Server [HPA]
    targetCPUUtilizationPercentage: 50
    # -- Average memory utilization percentage for the Argo Server [HPA]
    targetMemoryUtilizationPercentage: 50
    behavior: {}
  pdb:
    enabled: false
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""
  secure: false
  extraEnv: []
  extraArgs:
    - --auth-mode
    - sso
    - --auth-mode
    - server

  logging:
    level: info
    globallevel: "0"
    format: "text"
  volumeMounts: []
  volumes: []
  ingress:
    enabled: true
    https: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    labels: {}
    ingressClassName: "nginx"
    hosts:
      - argo-workflows.fugue-state.io
    paths:
      - /
    pathType: Prefix
    extraPaths: []
    tls:
      - secretName: argo-workflows-secret
        hosts:
          - argo-workflows.fugue-state.io
  
  clusterWorkflowTemplates:
    enabled: true
    enableEditing: true

  sso:
    enabled: true
    issuer: https://argocd.fugue-state.io/api/dex
    sessionExpiry: 240h
    clientId:
      key: client-id
      name: argo-workflows-sso
    clientSecret:
      key: client-secret
      name: argo-workflows-sso
    redirectUrl: https://argo-workflows.fugue-state.io/oauth2/callback
    rbac:
      enabled: true
      secretWhitelist: 
      - argo-workflows-sso
      - server-sa.service-account-token
      - argo-workflow.service-account-token
      - argo-workflows-workflow-controller.service-account-token
    scopes: 
     - groups
     - email
    issuerAlias: ""
    customGroupClaimName: ""
    userInfoPath: ""
    insecureSkipVerify: false
  extraContainers: []
  extraInitContainers: []

extraObjects: 
  - apiVersion: v1
    kind: Secret
    metadata:
      name: server-sa.service-account-token
      annotations:
        kubernetes.io/service-account.name: server-sa
    type: kubernetes.io/service-account-token
  - apiVersion: v1
    kind: Secret
    metadata:
      name: argo-workflow.service-account-token
      annotations:
        kubernetes.io/service-account.name: argo-workflow
    type: kubernetes.io/service-account-token
  - apiVersion: v1
    kind: Secret
    metadata:
      name: argo-workflows-workflow-controller.service-account-token
      annotations:
        kubernetes.io/service-account.name: argo-workflows-workflow-controller
    type: kubernetes.io/service-account-token

useStaticCredentials: true
artifactRepository:
  archiveLogs: false
  s3: {}
  gcs: {}
  azure: {}


customArtifactRepository: {}

emissary:
  images: []